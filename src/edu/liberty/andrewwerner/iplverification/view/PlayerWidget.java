package edu.liberty.andrewwerner.iplverification.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import edu.liberty.andrewwerner.iplverification.model.*;
import edu.liberty.andrewwerner.iplverification.presenter.IPresenter;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.util.Locale;
import java.util.TimeZone;

/**
 * Class PlayerWidget
 * Represents a widget displaying a player's details
 *
 * @author Andrew Werner
 */
public final class PlayerWidget implements IWidget {
    private JPanel contentPanel;
    private JLabel playerName;
    private JButton openPlayerButton;
    private JLabel playerVerifStatus;
    private JLabel playerVerifLabel;
    private JLabel teamName;
    private JButton openTeamButton;
    private JLabel droppedLabel;
    private JLabel eventName;
    private JButton openEventButton;

    private final IPresenter presenter;
    private final IPlayer player;

    /**
     * Creates a new object of class PlayerWidget
     * @param presenter the presenter to refer to when events are fired.
     * @param player the player to display information on.
     */
    public PlayerWidget(IPresenter presenter, IPlayer player, boolean displayParents) {
        this.presenter = presenter;
        this.player = player;

        if (displayParents) {
            ITeam team = this.player.getTeam();
            IEvent event = team.getEvent();
            new URLHandler(this.eventName, event.getBracketSiteURL(), "Event: " + event.getName());
            new URLHandler(this.teamName, team.getBracketSiteURL(), "Team: " + team.getName());
        } else {
            this.eventName.setText("");
            this.teamName.setText("");
            this.contentPanel.remove(this.openEventButton);
            this.contentPanel.remove(this.openTeamButton);
        }

        // Player URLs not API obtainable yet, future proofing.
        if (!player.getBracketSiteURL().equals("")) {
            new URLHandler(this.playerName, this.player.getBracketSiteURL(), this.player.getName());
        } else {
            this.playerName.setText(this.player.getName());
        }
        VerificationStatus status = this.player.getVerificationStatus();
        this.playerVerifLabel.setText(status.getDisplayName());
        this.playerVerifStatus.setBackground(status.getColor());
        this.playerVerifStatus.setBorder(new EmptyBorder(10, 10, 10, 10));

        ZonedDateTime now = LocalDateTime.now().atZone(TimeZone.getDefault().toZoneId());
        String eventStarted = this.player.getTeam().getEvent().getStartDateTime().isBefore(now) ?
                "Played during Event" : "On Team Roster";
        this.droppedLabel.setText(this.player.isDropped() ? "Dropped from Team Roster" : eventStarted);

        // Event listeners
        this.openEventButton.addActionListener(e -> this.presenter.changeView(IPresenter.PID.Event, this.player.getTeam().getEvent()));
        this.openTeamButton.addActionListener(e -> this.presenter.changeView(IPresenter.PID.Team, this.player.getTeam()));
        this.openPlayerButton.addActionListener(e -> this.presenter.changeView(IPresenter.PID.Player, this.player));
    }

    @Override
    public JPanel getContentPanel() {
        return this.contentPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(5, 2, new Insets(10, 10, 10, 10), -1, -1));
        contentPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        playerName = new JLabel();
        Font playerNameFont = this.$$$getFont$$$(null, -1, 14, playerName.getFont());
        if (playerNameFont != null) playerName.setFont(playerNameFont);
        playerName.setText("[Player Name]");
        contentPanel.add(playerName, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openPlayerButton = new JButton();
        openPlayerButton.setText("Go To Player");
        contentPanel.add(openPlayerButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        contentPanel.add(separator1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        playerVerifStatus = new JLabel();
        playerVerifStatus.setOpaque(true);
        playerVerifStatus.setText("");
        panel1.add(playerVerifStatus, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerVerifLabel = new JLabel();
        playerVerifLabel.setOpaque(true);
        playerVerifLabel.setText("[Verif Status]");
        panel1.add(playerVerifLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        teamName = new JLabel();
        teamName.setText("[Team Name]");
        contentPanel.add(teamName, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        eventName = new JLabel();
        eventName.setText("[Event Name]");
        contentPanel.add(eventName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openTeamButton = new JButton();
        openTeamButton.setText("Go To Team");
        contentPanel.add(openTeamButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openEventButton = new JButton();
        openEventButton.setText("Go To Event");
        contentPanel.add(openEventButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        droppedLabel = new JLabel();
        droppedLabel.setText("[Is Dropped?]");
        contentPanel.add(droppedLabel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
