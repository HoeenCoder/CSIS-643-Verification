package edu.liberty.andrewwerner.iplverification.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import edu.liberty.andrewwerner.iplverification.model.*;
import edu.liberty.andrewwerner.iplverification.presenter.IPresenter;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Locale;

/**
 * Class TeamWidget
 * Represents a widget displaying a team's details
 *
 * @author Andrew Werner
 */
public final class TeamWidget implements IWidget {
    private JPanel contentPanel;
    private JLabel teamName;
    private JLabel teamVerifLabel;
    private JButton openTeamButton;
    private JLabel playerLabel1;
    private JLabel playerLabel2;
    private JLabel playerLabel3;
    private JLabel playerLabel4;
    private JLabel playerLabel5;
    private JLabel playerLabel6;
    private JLabel playerLabel7;
    private JLabel playerLabel8;
    private JLabel verifStatus1;
    private JLabel verifStatus2;
    private JLabel verifStatus3;
    private JLabel verifStatus4;
    private JLabel verifStatus5;
    private JLabel verifStatus6;
    private JLabel verifStatus7;
    private JLabel verifStatus8;
    private JLabel teamVerifStatus;
    private JLabel eventName;
    private JButton openEventButton;

    private final IPresenter presenter;
    private final ITeam team;

    /**
     * Creates a new object of class TeamWidget
     * @param presenter the presenter to refer to when events are fired.
     * @param team the team to display information on.
     */
    public TeamWidget(IPresenter presenter, ITeam team, boolean displayParents) {
        this.presenter = presenter;
        this.team = team;

        EmptyBorder border = new EmptyBorder(10, 10, 10, 10);

        new URLHandler(this.teamName, this.team.getBracketSiteURL(), this.team.getName());
        if (displayParents) {
            IEvent event = this.team.getEvent();
            new URLHandler(this.eventName, event.getBracketSiteURL(), "Event: " + event.getName());
        } else {
            this.eventName.setText("");
            this.contentPanel.remove(openEventButton);
        }
        VerificationStatus status = team.getVerificationStatus();
        this.teamVerifLabel.setText(status.getDisplayName());
        this.teamVerifStatus.setBackground(status.getColor());
        this.teamVerifStatus.setBorder(border);

        ArrayList<IPlayer> roster = team.getRoster();
        if (roster == null) {
            throw new IllegalStateException("Unable to access team's roster.");
        }
        Collections.sort(roster);

        JLabel[] labels = {playerLabel1, playerLabel2, playerLabel3, playerLabel4,
                playerLabel5, playerLabel6, playerLabel7, playerLabel8};
        JLabel[] verifIndicators = {verifStatus1, verifStatus2, verifStatus3, verifStatus4,
                verifStatus5, verifStatus6, verifStatus7, verifStatus8};
        for (int i = 0; i < roster.size(); i++) {
            JLabel label = labels[i];
            JLabel verifStatus = verifIndicators[i];
            IPlayer player = roster.get(i);

            label.setText(player.getName());
            verifStatus.setBackground(player.getVerificationStatus().getColor());
            verifStatus.setBorder(border);
        }

        // Event listeners
        this.openEventButton.addActionListener(e -> this.presenter.changeView(IPresenter.PID.Event, this.team.getEvent()));
        this.openTeamButton.addActionListener(e -> this.presenter.changeView(IPresenter.PID.Team, this.team));
    }

    @Override
    public JPanel getContentPanel() {
        return this.contentPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(5, 4, new Insets(10, 10, 10, 10), -1, -1));
        contentPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        teamName = new JLabel();
        Font teamNameFont = this.$$$getFont$$$(null, -1, 14, teamName.getFont());
        if (teamNameFont != null) teamName.setFont(teamNameFont);
        teamName.setText("[Team Name]");
        contentPanel.add(teamName, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openTeamButton = new JButton();
        openTeamButton.setText("Go To Team");
        contentPanel.add(openTeamButton, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        playerLabel1 = new JLabel();
        playerLabel1.setOpaque(true);
        playerLabel1.setText("");
        panel1.add(playerLabel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        verifStatus1 = new JLabel();
        verifStatus1.setOpaque(true);
        verifStatus1.setText("");
        panel1.add(verifStatus1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel2, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        playerLabel2 = new JLabel();
        playerLabel2.setOpaque(true);
        playerLabel2.setText("");
        panel2.add(playerLabel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        verifStatus2 = new JLabel();
        verifStatus2.setOpaque(true);
        verifStatus2.setText("");
        panel2.add(verifStatus2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel3, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        verifStatus3 = new JLabel();
        verifStatus3.setOpaque(true);
        verifStatus3.setText("");
        panel3.add(verifStatus3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerLabel3 = new JLabel();
        playerLabel3.setOpaque(true);
        playerLabel3.setText("");
        panel3.add(playerLabel3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel4, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        verifStatus4 = new JLabel();
        verifStatus4.setOpaque(true);
        verifStatus4.setText("");
        panel4.add(verifStatus4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerLabel4 = new JLabel();
        playerLabel4.setOpaque(true);
        playerLabel4.setText("");
        panel4.add(playerLabel4, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel5, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        verifStatus5 = new JLabel();
        verifStatus5.setOpaque(true);
        verifStatus5.setText("");
        panel5.add(verifStatus5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerLabel5 = new JLabel();
        playerLabel5.setOpaque(true);
        playerLabel5.setText("");
        panel5.add(playerLabel5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel6, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        verifStatus6 = new JLabel();
        verifStatus6.setOpaque(true);
        verifStatus6.setText("");
        panel6.add(verifStatus6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerLabel6 = new JLabel();
        playerLabel6.setOpaque(true);
        playerLabel6.setText("");
        panel6.add(playerLabel6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel7, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        verifStatus7 = new JLabel();
        verifStatus7.setOpaque(true);
        verifStatus7.setText("");
        panel7.add(verifStatus7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerLabel7 = new JLabel();
        playerLabel7.setOpaque(true);
        playerLabel7.setText("");
        panel7.add(playerLabel7, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel8, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        verifStatus8 = new JLabel();
        verifStatus8.setOpaque(true);
        verifStatus8.setText("");
        panel8.add(verifStatus8, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        playerLabel8 = new JLabel();
        playerLabel8.setOpaque(true);
        playerLabel8.setText("");
        panel8.add(playerLabel8, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel9, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        teamVerifStatus = new JLabel();
        teamVerifStatus.setOpaque(true);
        teamVerifStatus.setText("");
        panel9.add(teamVerifStatus, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        teamVerifLabel = new JLabel();
        teamVerifLabel.setOpaque(true);
        teamVerifLabel.setText("[Verif Status]");
        panel9.add(teamVerifLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        contentPanel.add(separator1, new GridConstraints(2, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, 1, null, null, null, 0, false));
        eventName = new JLabel();
        eventName.setText("[Event Name]");
        contentPanel.add(eventName, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        openEventButton = new JButton();
        openEventButton.setText("Go To Event");
        contentPanel.add(openEventButton, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

}
